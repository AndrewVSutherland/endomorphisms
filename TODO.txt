Wrapper.py: document Sage part
FractionalCRT.m: reduction takes too much time
Branches.m, Divisor.m, Cantor.m: appropriate margins in various computations
Branches.m: make as fast as possible, add possibility to refine calculated approximation further when proceeding to higher degree
Divisor.m: get rid of Weierstrass condition (possible on one factor, on both if leading terms given)
Divisor.m: get rid of Weierstrass echelonization since it should not be needed
Divisor.m: automatically scale equations to ge a rational non-Weierstrass point
Debugging: Sato-Tate bug in CR's examples, understand rank 3 phenomenon in DS's example


Idempotent finding:

(1) Given a period matrix P, calculate the corresponding geometric endomorphism algebra over the splitting field L.

(2) Calculate the central decomposition of that algebra. This gives rise to a bunch of factors Q_i, which can be split off by using the existing function ProjectionFromIdempotent. We can use the tangent representation to find the field over which this occurs. Fix one such factor and call it Q.

(3) We get a map P --> Q for free with the projection. Calculate the endomorphism algebra of Q, either directly or by somehow passing it on from that of P (which should be possible in principle).

(4) We get another lattice, this time for Q. We ascend in this lattice, and find a minimal height at which the corresponding algebra is no longer a division algebra. (Possible with MatrixAlgebra and IsDivisionAlgebra.) Find a corresponding idempotent (somehow!).

(5) Calculate the corresponding curve (it should have indecomposable Jacobian) and find all maps from P to it.

Idempotent factor and, starting from scratch after that, possible polarizations (perhaps non-inherited ones as well)


Map to elliptic curves
